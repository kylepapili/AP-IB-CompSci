#BlueJ class context
comment0.target=Turtle
comment0.text=\n\ Turtle\ is\ a\ selfcontained\ class\ that\ will\ allow\ students\ to\ make\n\ beautiful\ turtle\ graphics\ with\ ease.\n\n\ @author\ Nicholas\ Seward\n
comment1.params=
comment1.target=void\ run()
comment1.text=\n\ This\ is\ an\ internal\ method\ that\ should\ never\ be\ called.\n
comment10.params=
comment10.target=void\ setupBuffering()
comment100.params=color
comment100.target=void\ bgcolor(java.lang.String)
comment100.text=\n\ Sets\ the\ background\ color.\n\n\ @param\ color\ Color\ of\ the\ background.\n
comment101.params=color
comment101.target=void\ bgcolor(java.awt.Color)
comment101.text=\n\ Sets\ the\ background\ color.\n\n\ @param\ color\ Color\ of\ the\ background.\n
comment102.params=filename
comment102.target=void\ bgpic(java.lang.String)
comment102.text=\n\ Set\ the\ background\ image.\n\n\ @param\ filename\ filename\ for\ a\ background\ image\n
comment103.params=methodName\ t\ append\ click\ repeat
comment103.target=boolean\ addMouseBinding(java.lang.String,\ Turtle,\ boolean,\ boolean,\ boolean)
comment104.params=methodName\ keyText\ append\ repeat
comment104.target=boolean\ addKeyBinding(java.lang.String,\ java.lang.String,\ boolean,\ boolean)
comment105.params=methodName\ keyText
comment105.target=boolean\ onKey(java.lang.String,\ java.lang.String)
comment105.text=\n\ Links\ a\ method\ to\ a\ key.\n\n\ @param\ methodName\ method\ to\ be\ executed\ when\ the\ key\ is\ pressed\n\ @param\ keyText\ key\ that\ triggers\ the\ method\n\ @return\n
comment106.params=methodName\ keyText\ append
comment106.target=boolean\ onKey(java.lang.String,\ java.lang.String,\ boolean)
comment106.text=\n\ Links\ a\ method\ to\ a\ key.\n\n\ @param\ methodName\ method\ to\ be\ executed\ when\ the\ key\ is\ pressed\n\ @param\ keyText\ key\ that\ triggers\ the\ method\n\ @param\ append\ true\ if\ you\ want\ to\ have\ multiple\ methods\ per\ key\n\ @return\n
comment107.params=methodName\ keyText\ append\ repeat
comment107.target=boolean\ onKey(java.lang.String,\ java.lang.String,\ boolean,\ boolean)
comment107.text=\n\ Links\ a\ method\ to\ a\ key.\n\n\ @param\ methodName\ method\ to\ be\ executed\ when\ the\ key\ is\ pressed\n\ @param\ keyText\ key\ that\ triggers\ the\ method\n\ @param\ append\ true\ if\ you\ want\ to\ have\ multiple\ methods\ per\ key\n\ @param\ repeat\ true\ if\ you\ want\ call\ the\ method\ every\ screen\ refresh\n\ @return\n
comment108.params=minx\ miny\ maxx\ maxy
comment108.target=void\ zoom(double,\ double,\ double,\ double)
comment108.text=\n\n\ Fits\ the\ indicated\ box\ in\ the\ center\ of\ the\ screen\ as\ large\ as\ possible.\n\n\ @param\ minx\ left\ x\ coordinate\ of\ box\n\ @param\ miny\ bottom\ y\ coordinate\ of\ box\n\ @param\ maxx\ right\ x\ coordinate\ of\ box\n\ @param\ maxy\ top\ y\ coordinate\ of\ box\n
comment109.params=
comment109.target=void\ zoomFit()
comment109.text=\n\ Fits\ everything\ on\ the\ screen.\n
comment11.params=
comment11.target=void\ drawTurtleIcon()
comment110.params=
comment110.target=void\ updateAll()
comment111.params=
comment111.target=void\ update()
comment111.text=\n\ Force\ redraw\ when\ the\ refreshMode\ is\ set\ to\ on\ demand.\n
comment112.params=
comment112.target=void\ draw()
comment113.params=percent\ g
comment113.target=void\ drawLine(double,\ java.awt.Graphics2D)
comment114.params=percent\ g
comment114.target=void\ drawStamp(double,\ java.awt.Graphics2D)
comment115.params=percent\ g\ isStamp
comment115.target=void\ drawStamp(double,\ java.awt.Graphics2D,\ boolean)
comment116.params=percent\ g
comment116.target=void\ drawDot(double,\ java.awt.Graphics2D)
comment117.params=g
comment117.target=void\ drawBackground(java.awt.Graphics2D)
comment118.params=percent\ g
comment118.target=void\ drawCrossHairs(double,\ java.awt.Graphics2D)
comment119.params=width\ height
comment119.target=void\ setCanvasSize(int,\ int)
comment119.text=\n\ Changes\ the\ size\ of\ the\ canvas\ effectively\ changing\ the\ size\ of\ the\ window.\n\n\ @param\ width\ width\ of\ the\ canvas\n\ @param\ height\ height\ of\ the\ canvas\n
comment12.params=
comment12.target=void\ makeShapes()
comment120.params=filename
comment120.target=void\ save(java.lang.String)
comment120.text=\n\ Saves\ the\ visible\ canvas\ to\ an\ image.\n\n\ @param\ filename\ image\ filename\n
comment121.params=file
comment121.target=void\ save(java.io.File)
comment122.params=a
comment122.target=void\ main(java.lang.String[])
comment122.text=\n\ Demo\ program\n\n\ @param\ a\ commandline\ args\n
comment123.params=e
comment123.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment123.text=\n\ Internal\ mehod\ for\ handling\ events.\n\ @param\ e\ event\n
comment124.params=e
comment124.target=void\ mouseClicked(java.awt.event.MouseEvent)
comment124.text=\n\ Internal\ mehod\ for\ handling\ events.\n\ @param\ e\ event\n
comment125.params=e
comment125.target=void\ mouseEntered(java.awt.event.MouseEvent)
comment125.text=\n\ Internal\ mehod\ for\ handling\ events.\n\ @param\ e\ event\n
comment126.params=e
comment126.target=void\ mouseExited(java.awt.event.MouseEvent)
comment126.text=\n\ Internal\ mehod\ for\ handling\ events.\n\ @param\ e\ event\n
comment127.params=e
comment127.target=void\ mousePressed(java.awt.event.MouseEvent)
comment127.text=\n\ Internal\ mehod\ for\ handling\ events.\n\ @param\ e\ event\n
comment128.params=e
comment128.target=void\ mouseReleased(java.awt.event.MouseEvent)
comment128.text=\n\ Internal\ mehod\ for\ handling\ events.\n\ @param\ e\ event\n
comment129.params=e
comment129.target=void\ mouseDragged(java.awt.event.MouseEvent)
comment129.text=\n\ Internal\ mehod\ for\ handling\ events.\n\ @param\ e\ event\n
comment13.params=i
comment13.target=Turtle(int)
comment13.text=\n\ This\ is\ a\ internal\ constuctor\ that\ makes\ a\ singleton\ that\ does\ the\n\ listening\ but\ is\ not\ added\ to\ the\ stack\ of\ turtles\ to\ be\ rendered.\n\ You\ don't\ need\ to\ use\ this\ outside\ of\ the\ Turtle.java\ file.\n\n\ @param\ i\ Pass\ this\ any\ integer.\ \ It\ doesn't\ do\ anything.\n
comment130.params=e
comment130.target=void\ mouseMoved(java.awt.event.MouseEvent)
comment130.text=\n\ Internal\ mehod\ for\ handling\ events.\n\ @param\ e\ event\n
comment131.params=e
comment131.target=void\ keyTyped(java.awt.event.KeyEvent)
comment131.text=\n\ Internal\ mehod\ for\ handling\ events.\n\ @param\ e\ event\n
comment132.params=e
comment132.target=void\ keyPressed(java.awt.event.KeyEvent)
comment132.text=\n\ Internal\ mehod\ for\ handling\ events.\n\ @param\ e\ event\n
comment133.params=e
comment133.target=void\ keyReleased(java.awt.event.KeyEvent)
comment133.text=\n\ Internal\ mehod\ for\ handling\ events.\n\ @param\ e\ event\n
comment134.params=
comment134.target=void\ processKeys()
comment135.params=e
comment135.target=void\ componentHidden(java.awt.event.ComponentEvent)
comment135.text=\n\ Internal\ mehod\ for\ handling\ events.\n\ @param\ e\ event\n
comment136.params=e
comment136.target=void\ componentMoved(java.awt.event.ComponentEvent)
comment136.text=\n\ Internal\ mehod\ for\ handling\ events.\n\ @param\ e\ event\n
comment137.params=e
comment137.target=void\ componentResized(java.awt.event.ComponentEvent)
comment137.text=\n\ Internal\ mehod\ for\ handling\ events.\n\ @param\ e\ event\n
comment138.params=e
comment138.target=void\ componentShown(java.awt.event.ComponentEvent)
comment138.text=\n\ Internal\ mehod\ for\ handling\ events.\n\ @param\ e\ event\n
comment139.params=e
comment139.target=void\ mouseWheelMoved(java.awt.event.MouseWheelEvent)
comment139.text=\n\ Internal\ mehod\ for\ handling\ events.\n\ @param\ e\ event\n
comment14.params=
comment14.target=Turtle()
comment14.text=\n\ Makes\ a\ default\ turtle.\n
comment140.params=
comment140.target=java.lang.String[]\ keysDown()
comment140.text=\n\ Get\ the\ pressed\ keys.\n\n\ @return\ a\ list\ of\ pressed\ keys\n
comment141.params=key
comment141.target=boolean\ isKeyDown(java.lang.String)
comment141.text=\n\ Test\ if\ a\ key\ is\ pressed\ or\ not.\n\n\ @param\ key\ key\ you\ are\ testing\n\ @return\ true\ if\ the\ key\ is\ pressed\n
comment142.params=
comment142.target=int\ mouseX()
comment142.text=\n\ Get\ the\ mouse\ x\ coordinate\ using\ the\ screens\ coordinate\ system.\n\n\ @return\ x\ coordinate\n
comment143.params=
comment143.target=int\ mouseY()
comment143.text=\n\ Get\ the\ mouse\ y\ coordinate\ using\ the\ screens\ coordinate\ system.\n\n\ @return\ y\ coordinate\n
comment144.params=
comment144.target=boolean\ mouseButton()
comment144.text=\n\ Check\ to\ see\ if\ a\ \ mouse\ button\ is\ down.\n\n\ @return\ true\ if\ a\ button\ is\ down\n
comment145.params=
comment145.target=boolean\ mouseButton1()
comment145.text=\n\ Check\ to\ see\ if\ the\ first\ mouse\ button\ is\ down.\n\n\ @return\ true\ if\ button\ 1\ is\ down\n
comment146.params=
comment146.target=boolean\ mouseButton2()
comment146.text=\n\ Check\ to\ see\ if\ the\ second\ mouse\ button\ is\ down.\n\n\ @return\ true\ if\ button\ 2\ is\ down\n
comment147.params=
comment147.target=boolean\ mouseButton3()
comment147.text=\n\ Check\ to\ see\ if\ the\ third\ mouse\ button\ is\ down.\n\n\ @return\ true\ if\ button\ 3\ is\ down\n
comment148.params=screenX
comment148.target=double\ canvasX(double)
comment148.text=\n\ Converts\ screen\ coordinates\ to\ canvas\ coordinates.\n\n\ @param\ screenX\ screen\ x\ coordinate\n\ @return\ canvas\ x\ coordinate\n
comment149.params=screenY
comment149.target=double\ canvasY(double)
comment149.text=\n\ Converts\ screen\ coordinates\ to\ canvas\ coordinates.\n\n\ @param\ screenY\ screen\ y\ coordinate\n\ @return\ canvas\ y\ coordinate\n
comment15.params=x\ y
comment15.target=Turtle(double,\ double)
comment15.text=\n\ Makes\ a\ default\ turtle\ at\ the\ specified\ position.\n\n\ @param\ x\ x\ coordinate\n\ @param\ y\ y\ coordinate\n
comment16.params=
comment16.target=Turtle\ clone()
comment16.text=\n\ This\ creates\ a\ cloned\ copy\ of\ a\ turtle.\n\n\ @return\ a\ cloned\ copy\ of\ a\ turtle\n
comment17.params=
comment17.target=long\ storeCurrentState()
comment17.text=\ \ \ \ .-./*)\ \ \ .-./*)\ \ \ .-./*)\ \ \ .-./*)\ \ \ .-./*)\ \ \ .-./*)\ \ \ .-./*)\ \ \ .-./*)\n\ \ _/___\\/\ \ _/___\\/\ \ _/___\\/\ \ _/___\\/\ \ _/___\\/\ \ _/___\\/\ \ _/___\\/\ \ _/___\\/\n\ \ \ \ U\ U\ \ \ \ \ \ U\ U\ \ \ \ \ \ U\ U\ \ \ \ \ \ U\ U\ \ \ \ \ \ U\ U\ \ \ \ \ \ U\ U\ \ \ \ \ \ U\ U\ \ \ \ \ \ U\ U\n\ \ \ \ .-./*)\ \ \ .-./*)\ \ \ .-./*)\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ .-./*)\ \ \ .-./*)\ \ \ .-./*)\n\ \ _/___\\/\ \ _/___\\/\ \ _/___\\/\ \ STATE\ MANAGEMENT\ \ _/___\\/\ \ _/___\\/\ \ _/___\\/\n\ \ \ \ U\ U\ \ \ \ \ \ U\ U\ \ \ \ \ \ U\ U\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ U\ U\ \ \ \ \ \ U\ U\ \ \ \ \ \ U\ U\n\ \ \ \ .-./*)\ \ \ .-./*)\ \ \ .-./*)\ \ \ .-./*)\ \ \ .-./*)\ \ \ .-./*)\ \ \ .-./*)\ \ \ .-./*)\n\ \ _/___\\/\ \ _/___\\/\ \ _/___\\/\ \ _/___\\/\ \ _/___\\/\ \ _/___\\/\ \ _/___\\/\ \ _/___\\/\n\ \ \ \ U\ U\ \ \ \ \ \ U\ U\ \ \ \ \ \ U\ U\ \ \ \ \ \ U\ U\ \ \ \ \ \ U\ U\ \ \ \ \ \ U\ U\ \ \ \ \ \ U\ U\ \ \ \ \ \ U\ U\n
comment18.params=
comment18.target=long\ storeAnimatedState()
comment19.params=animate\ isStamp\ dotSize\ dotColor\ font\ text\ justification\ textOffset
comment19.target=long\ storeCurrentState(boolean,\ boolean,\ double,\ java.awt.Color,\ java.awt.Font,\ java.lang.String,\ int,\ java.awt.geom.Point2D.Double)
comment2.params=
comment2.target=void\ eventLoop()
comment20.params=
comment20.target=void\ clearStorage()
comment21.params=time
comment21.target=void\ retrieveState(long)
comment22.params=state
comment22.target=long\ getStateTime(java.util.ArrayList)
comment23.params=state
comment23.target=Turtle\ getStateTurtle(java.util.ArrayList)
comment24.params=state
comment24.target=java.awt.geom.Point2D.Double\ getStateLocation(java.util.ArrayList)
comment25.params=state
comment25.target=double\ getStateDirection(java.util.ArrayList)
comment26.params=state
comment26.target=java.lang.String\ getStateShape(java.util.ArrayList)
comment27.params=state
comment27.target=java.awt.image.BufferedImage\ getStateImage(java.util.ArrayList)
comment28.params=state
comment28.target=double\ getStateShapeWidth(java.util.ArrayList)
comment29.params=state
comment29.target=double\ getStateShapeHeight(java.util.ArrayList)
comment3.params=
comment3.target=void\ renderLoop()
comment30.params=state
comment30.target=double\ getStateTilt(java.util.ArrayList)
comment31.params=state
comment31.target=double\ getStatePenWidth(java.util.ArrayList)
comment32.params=state
comment32.target=java.awt.Color\ getStatePenColor(java.util.ArrayList)
comment33.params=state
comment33.target=double\ getStateOutlineWidth(java.util.ArrayList)
comment34.params=state
comment34.target=java.awt.Color\ getStateOutlineColor(java.util.ArrayList)
comment35.params=state
comment35.target=java.awt.Color\ getStateFillColor(java.util.ArrayList)
comment36.params=state
comment36.target=double\ getStateSpeed(java.util.ArrayList)
comment37.params=state
comment37.target=boolean\ getStateIsPenDown(java.util.ArrayList)
comment38.params=state
comment38.target=boolean\ getStateIsFilling(java.util.ArrayList)
comment39.params=state
comment39.target=boolean\ getStateIsVisible(java.util.ArrayList)
comment4.params=time
comment4.target=boolean\ waitUntil(java.lang.Long)
comment40.params=state
comment40.target=boolean\ getStateIsStamp(java.util.ArrayList)
comment41.params=state
comment41.target=double\ getStateDotSize(java.util.ArrayList)
comment42.params=state
comment42.target=java.awt.Color\ getStateDotColor(java.util.ArrayList)
comment43.params=state
comment43.target=java.awt.Font\ getStateFont(java.util.ArrayList)
comment44.params=state
comment44.target=java.lang.String\ getStateText(java.util.ArrayList)
comment45.params=state
comment45.target=int\ getStateJustification(java.util.ArrayList)
comment46.params=state
comment46.target=java.awt.geom.Point2D.Double\ getStateTextOffset(java.util.ArrayList)
comment47.params=time
comment47.target=void\ restoreState(long)
comment48.params=
comment48.target=void\ select()
comment49.params=
comment49.target=void\ unselect()
comment5.params=
comment5.target=void\ init()
comment50.params=x\ y
comment50.target=boolean\ contains(int,\ int)
comment50.text=\n\ Determines\ if\ a\ turtle\ is\ covering\ a\ screen\ position\n\n\ @param\ x\ x\ screen\ coordinate\n\ @param\ y\ y\ screen\ coordinate\n\ @return\ true\ if\ this\ turtle\ is\ at\ the\ indicated\ screen\ position.\n
comment51.params=
comment51.target=double\ getSpeed()
comment51.text=\n\ Gets\ the\ speed\ of\ the\ animation.\n\ @return\ milliseconds\ it\ takes\ to\ do\ one\ action\n
comment52.params=delay
comment52.target=long\ speed(double)
comment52.text=\n\ Sets\ the\ speed\ of\ the\ animation.\n\ @param\ delay\ milliseconds\ it\ takes\ to\ do\ one\ action\n\ @return\ state\ change\ timestamp\n
comment53.params=distance
comment53.target=long\ forward(double)
comment53.text=\n\ Moves\ the\ turtle\ forward\ by\ the\ distance.\n\n\ @param\ distance\ distance\ to\ move\ forward\n\ @return\ state\ change\ timestamp\n
comment54.params=distance
comment54.target=long\ backward(double)
comment54.text=\n\ Moves\ the\ turtle\ backward\ by\ the\ distance.\n\n\ @param\ distance\ distance\ to\ move\ backward\n\ @return\ state\ change\ timestamp\n
comment55.params=angle
comment55.target=long\ left(double)
comment55.text=\n\ Turns\ the\ turtle\ left\ by\ the\ number\ of\ indicated\ degrees.\n\ \n\ @param\ angle\ angle\ in\ degrees\n\ @return\ state\ change\ timestamp\n
comment56.params=angle
comment56.target=long\ right(double)
comment56.text=\n\ Turns\ the\ turtle\ right\ by\ the\ number\ of\ indicated\ degrees.\n\ \n\ @param\ angle\ angle\ in\ degrees\n\ @return\ state\ change\ timestamp\n
comment57.params=
comment57.target=double\ getDirection()
comment57.text=\n\ Gets\ the\ direction\ the\ turtle\ is\ facing\ neglecting\ tilt.\n\n\ @return\ state\ change\ timestamp\n
comment58.params=direction
comment58.target=long\ setDirection(double)
comment58.text=\n\ Sets\ the\ direction\ the\ turtle\ is\ facing\ neglecting\ tilt.\n\n\ @param\ direction\ angle\ counter-clockwise\ from\ east\n\ @return\ state\ change\ timestamp\n
comment59.params=
comment59.target=long\ home()
comment59.text=\n\ Moves\ the\ turtle\ to\ (0,0)\ and\ facing\ east.\n\n\ @return\ state\ change\ timestamp\n
comment6.params=
comment6.target=void\ exit()
comment60.params=
comment60.target=long\ hide()
comment60.text=\n\ Hides\ the\ turtle\ but\ it\ can\ still\ draw.\n\n\ @return\ state\ change\ timestamp\n
comment61.params=
comment61.target=long\ show()
comment61.text=\n\ Makes\ the\ turtle\ visible.\n\n\ @return\ state\ change\ timestamp\n
comment62.params=x\ y
comment62.target=long\ face(double,\ double)
comment62.text=\n\ Sets\ the\ direction\ in\ such\ a\ way\ that\ it\ faces\ (x,y)\n\n\ @param\ x\ x\ coordinate\ of\ target\ location\n\ @param\ y\ y\ coordinate\ of\ target\ location\n\ @return\ state\ change\ timestamp\n
comment63.params=x\ y
comment63.target=double\ towards(double,\ double)
comment63.text=\n\ Gets\ direction\ towards\ (x,y)\n\n\ @param\ x\ x\ coordinate\ of\ target\ location\n\ @param\ y\ y\ coordinate\ of\ target\ location\n\ @return\ angle\ in\ degrees\ where\ 0<\=angle<360\n
comment64.params=x\ y
comment64.target=double\ distance(double,\ double)
comment64.text=\n\ Gets\ the\ distance\ to\ another\ position.\n\n\ @param\ x\ x\ coordinate\ of\ target\ location\n\ @param\ y\ y\ coordinate\ of\ target\ location\n\ @return\ distance\ between\ turtle's\ current\ location\ and\ another\ position\n
comment65.params=
comment65.target=double\ getX()
comment65.text=\n\ Gets\ the\ x\ coordinate\ of\ the\ turtle.\n\n\ @return\ x\ coordinate\n
comment66.params=
comment66.target=double\ getY()
comment66.text=\n\ Gets\ the\ y\ coordinate\ of\ the\ turtle.\n\n\ @return\ y\ coordinate\n
comment67.params=x\ y\ direction
comment67.target=long\ setPosition(double,\ double,\ double)
comment67.text=\n\ Sets\ the\ position\ and\ direction\ of\ a\ turtle.\n\n\ @param\ x\ x\ coordinate\n\ @param\ y\ y\ coordinate\n\ @param\ direction\ angle\ counter-clockwise\ from\ east\ in\ degrees\n\ @return\ state\ change\ timestamp\n
comment68.params=x\ y
comment68.target=long\ setPosition(double,\ double)
comment68.text=\n\ Sets\ the\ position\ and\ direction\ of\ a\ turtle.\n\n\ @param\ x\ x\ coordinate\n\ @param\ y\ y\ coordinate\n\ @return\ state\ change\ timestamp\n
comment69.params=angle
comment69.target=long\ tilt(double)
comment69.text=\n\ Adds\ an\ additional\ angle\ to\ rotation\ of\ the\ turtle's\ shape\ when\ rendering.\n\ This\ is\ useful\ when\ you\ need\ to\ face\ a\ different\ direction\ than\ the\n\ direction\ you\ are\ moving\ in.\n\n\ @param\ angle\ angle\ in\ degrees\n\ @return\ state\ change\ timestamp\n
comment7.params=applet
comment7.target=void\ startApplet(javax.swing.JApplet)
comment7.text=\n\ This\ is\ an\ experimental\ method\ that\ should\ allow\ you\ to\ make\ turtle\n\ applets\ in\ the\ future.\ \ For\ now,\ it\ doesn't\ work\ because\ the\ key\ and\n\ mouse\ bindings\ require\ reflection\ and\ applets\ think\ that\ allowing\n\ reflection\ would\ open\ a\ security\ hole.\ \ Theoretically\ in\ the\ init\ method\n\ of\ the\ applet\ you\ need\ to\ place\ <code>Turtle.startApplet(this);</code>.\n\ <b>This\ is\ not\ currently\ working.</b>\n\n\ @param\ applet\n
comment70.params=angle
comment70.target=long\ setTilt(double)
comment70.text=\n\ Sets\ the\ angle\ to\ rotate\ the\ turtle's\ shape\ when\ rendering.\n\ This\ is\ useful\ when\ you\ need\ to\ face\ a\ different\ direction\ than\ the\n\ direction\ you\ are\ moving\ in.\n\n\ @param\ angle\ angle\ in\ degrees\n\ @return\ state\ change\ timestamp\n
comment71.params=
comment71.target=double\ getTilt()
comment71.text=\n\ Gets\ the\ rotation\ of\ the\ turtle's\ shape\ away\ from\ the\ turtle's\ direction.\n\n\ @return\ tilt\ in\ degrees\ (positive\ in\ counter-clockwise)\n
comment72.params=penWidth
comment72.target=long\ width(double)
comment72.text=\n\ Sets\ the\ width\ of\ the\ turtles\ path\n\n\ @param\ penWidth\ width\ of\ the\ turtles\ path\n\ @return\ state\ change\ timestamp\n
comment73.params=width
comment73.target=long\ outlineWidth(double)
comment73.text=\n\ Sets\ the\ width\ of\ the\ turtle's\ outline.\n\n\ @param\ width\ width\ of\ the\ turtle's\ outline\n\ @return\ state\ change\ timestamp\n
comment74.params=
comment74.target=long\ up()
comment74.text=\n\ Picks\ the\ turtle's\ tail\ up\ so\ it\ won't\ draw\ on\ the\ screen\ as\ it\ moves.\n\n\ @return\ state\ change\ timestamp\n
comment75.params=
comment75.target=long\ down()
comment75.text=\n\ Puts\ the\ turtle's\ tail\ down\ so\ it\ will\ draw\ on\ the\ screen\ as\ it\ moves.\n\n\ @return\ state\ change\ timestamp\n
comment76.params=penColor
comment76.target=long\ penColor(java.lang.String)
comment76.text=\n\ Sets\ the\ turtle's\ path\ color.\n\n\ @param\ penColor\ Color\ of\ the\ turtle's\ path.\n\ @return\ state\ change\ timestamp\n
comment77.params=penColor
comment77.target=long\ penColor(java.awt.Color)
comment77.text=\n\ Sets\ the\ turtle's\ path\ color.\n\n\ @param\ penColor\ Color\ of\ the\ turtle's\ path.\n\ @return\ state\ change\ timestamp\n
comment78.params=outlineColor
comment78.target=long\ outlineColor(java.lang.String)
comment78.text=\n\ Sets\ the\ turtle's\ outlineColor\ color.\n\n\ @param\ outlineColor\ Color\ of\ the\ turtle's\ outlineColor.\n\ @return\ state\ change\ timestamp\n
comment79.params=outlineColor
comment79.target=long\ outlineColor(java.awt.Color)
comment79.text=\n\ Sets\ the\ turtle's\ outlineColor\ color.\n\n\ @param\ outlineColor\ Color\ of\ the\ turtle's\ outlineColor.\n\ @return\ state\ change\ timestamp\n
comment8.params=
comment8.target=void\ initColors()
comment80.params=fillColor
comment80.target=long\ fillColor(java.lang.String)
comment80.text=\n\ Sets\ the\ turtle's\ fill\ color.\n\n\ @param\ fillColor\ Color\ of\ the\ turtle's\ fill.\n\ @return\ state\ change\ timestamp\n
comment81.params=fillColor
comment81.target=long\ fillColor(java.awt.Color)
comment81.text=\n\ Sets\ the\ turtle's\ fill\ color.\n\n\ @param\ fillColor\ Color\ of\ the\ turtle's\ fill.\n\ @return\ state\ change\ timestamp\n
comment82.params=shape
comment82.target=long\ shape(java.lang.String)
comment82.text=\n\ Sets\ the\ shape\ of\ the\ turtle\ using\ the\ built\ in\ shapes\ (turtle,square,\n\ rectangle,triangle,arrow,circle)\ or\ to\ a\ image.\n\n\ @param\ shape\ shapename\ or\ filename\ of\ image\n\ @return\ state\ change\ timestamp\n
comment83.params=width\ height
comment83.target=long\ shapeSize(int,\ int)
comment84.params=
comment84.target=long\ stamp()
comment84.text=\n\ Put\ a\ copy\ of\ the\ current\ turtle\ shape\ on\ the\ canvas.\n\n\ @return\ state\ change\ timestamp\n
comment85.params=
comment85.target=long\ dot()
comment85.text=\n\ Put\ a\ dot\ 3\ times\ the\ size\ of\ the\ penWidth\ on\ the\ canvas.\n\n\ @return\ state\ change\ timestamp\n
comment86.params=color
comment86.target=long\ dot(java.lang.String)
comment86.text=\n\ Put\ a\ dot\ 3\ times\ the\ size\ of\ the\ penWidth\ on\ the\ canvas.\n\n\ @param\ color\ color\ of\ dot\n\ @return\ state\ change\ timestamp\n
comment87.params=color
comment87.target=long\ dot(java.awt.Color)
comment87.text=\n\ Put\ a\ dot\ 3\ times\ the\ size\ of\ the\ penWidth\ on\ the\ canvas.\n\n\ @param\ color\ color\ of\ dot\n\ @return\ state\ change\ timestamp\n
comment88.params=color\ dotSize
comment88.target=long\ dot(java.lang.String,\ double)
comment88.text=\n\ Put\ a\ dot\ on\ the\ canvas.\n\n\ @param\ color\ color\ of\ dot\n\ @param\ dotSize\ diameter\ of\ the\ dot\n\ @return\ state\ change\ timestamp\n
comment89.params=color\ dotSize
comment89.target=long\ dot(java.awt.Color,\ double)
comment89.text=\n\ Put\ a\ dot\ on\ the\ canvas.\n\n\ @param\ color\ color\ of\ dot\n\ @param\ dotSize\ diameter\ of\ the\ dot\n\ @return\ state\ change\ timestamp\n
comment9.params=color
comment9.target=java.awt.Color\ getColor(java.lang.String)
comment90.params=text\ fontName\ fontSize\ justification\ xOffset\ yOffset
comment90.target=long\ write(java.lang.String,\ java.lang.String,\ int,\ int,\ double,\ double)
comment91.params=steps
comment91.target=void\ undo(int)
comment91.text=\n\ Undo\ turtle\ state\ changes.\n\n\ @param\ steps\ the\ number\ of\ state\ changes\ to\ remove\n
comment92.params=
comment92.target=void\ undo()
comment92.text=\n\ Undo\ the\ last\ turtle\ state\ change.\n
comment93.params=steps
comment93.target=void\ redo(int)
comment93.text=\n\ Redo\ turtle\ state\ changes.\n\n\ @param\ steps\ the\ number\ of\ state\ changes\ to\ restore\n
comment94.params=
comment94.target=void\ redo()
comment94.text=\n\ Redo\ turtle\ state\ changes.\n
comment95.params=
comment95.target=void\ clear()
comment95.text=\n\ Clears\ all\ the\ drawing\ that\ a\ turtle\ has\ done\ but\ all\ the\ turtle\n\ settings\ remain\ the\ same.\ (color,\ location,\ direction,\ shape)\n
comment96.params=
comment96.target=void\ rollback()
comment97.params=
comment97.target=void\ rollforward()
comment98.params=mode
comment98.target=void\ refreshMode(int)
comment98.text=\n\ This\ specifies\ when\ the\ screen\ gets\ refreshed.\n\ 0(default)\=Animated\ (The\ turtle\ will\ slide\ from\ one\ state\ to\ another\ without\ being\ jerky.)\n\ 1\=State\ Change\ (The\ turtle\ will\ refresh\ immediately\ to\ the\ last\ state.\ Jerky\ motion.)\n\ 2\=On\ Demand\ (The\ turtle\ will\ refresh\ only\ when\ you\ call\ update())\n\n\ @param\ mode\ refresh\ mode\n
comment99.params=mode
comment99.target=void\ backgroundMode(int)
comment99.text=\n\ This\ specifies\ how\ the\ background\ is\ drawn.\n\ 0\=The\ image\ if\ present\ is\ stretched\ to\ fill\ the\ screen.\n\ 1\=The\ image\ is\ centered\ on\ the\ middle\ of\ the\ screen\ and\ will\ not\ scale/pan\n\ 2\=The\ image\ is\ tiled\ and\ will\ not\ scale/pan\n\ 3\=The\ image\ is\ centered\ on\ (0,0)\ and\ will\ scale/pan\n\ 4(default)\=The\ image\ is\ tiled\ and\ will\ scale/pan\n\n\ @param\ mode\ background\ mode\n
numComments=150
